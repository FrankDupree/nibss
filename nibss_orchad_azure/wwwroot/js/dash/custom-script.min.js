const NIP = "nip"
    , POS = "pos"
    , POS_URL = "/traf/pos"
    , NIP_URL = "/traf/nip";
var nipData, posData, _time = (new Date).toDateString(), txnVol = 0, txnVolFailed = 0, failureRate = 0, processingTime = 0, type = "", minVol = "N/A", maxAccFailureRate = "N/A", txnStatuses = [], successCount = 0, successCountRate = 0, customerError = 0, customerErrorRate = 0, bankError = 0, bankErrorRate = 0, nibssError = 0, nibssErrorRate = 0, processorsError = 0, processorsErrorRate = 0, issuerSwitchError = 0, issuerSwitchErrorRate = 0, securityError = 0, securityErrorRate = 0, otherErrors = 0, otherErrorsRate = 0, graphData = [];
function getTransactionVolume(r, t) {
    $.get(r, function (r, a) {
        r = JSON.parse(r);
        var e = r.msg.txnCategory
            , o = r.msg.volumeGraphs[t].graph.legend
            , s = (r = r.msg.volumeGraphs[t].graph.points,
                [])
            , n = null;
        for (t = 0; t < r.length - 1; t++)
            0 == t && (n = r[t].x),
                dt = [r[t].x, r[t].y],
                s[t] = dt;
        Highcharts.chart("data-graph", {
            chart: {
                type: "spline"
            },
            title: {
                text: e,
                margin: 60,
                style: {
                    "font-family": "Sansation Bold V3",
                    "font-weight": "bold",
                    color: "#9d7c13",
                    "font-size": "18pt"
                }
            },
            xAxis: {
                type: "datetime",
                labels: {
                    overflow: "justify"
                },
                title: {
                    text: "Transaction Time"
                }
            },
            yAxis: {
                title: {
                    text: "Transaction Volume"
                },
                min: 0
            },
            noData: {
                style: {
                    fontWeight: "bold",
                    fontSize: "15px",
                    color: "#303030"
                }
            },
            credits: {
                enabled: !1
            },
            tooltip: {
                formatter: function () {
                    return "<b>" + this.series.name + '</b><br/> <b style="color:red;line-height:1.5">Time</b>: ' + Highcharts.dateFormat("%H:%M", new Date(this.x)) + '<br/><b style="color:blue">Volume</b>: ' + this.y
                }
            },
            plotOptions: {
                pointInterval: 9e5,
                pointStart: n
            },
            colors: ["#3b5998"],
            series: [{
                name: o,
                data: s
            }],
            responsive: {
                rules: [{
                    condition: {
                        maxWidth: 500
                    },
                    chartOptions: {
                        legend: {
                            align: 'center',
                            verticalAlign: 'bottom',
                            layout: 'horizontal'
                        },
                        yAxis: {
                            labels: {
                                align: 'left',
                                x: 0,
                                y: -5
                            },
                            title: {
                                text: null
                            }
                        },
                        subtitle: {
                            text: null
                        },
                        credits: {
                            enabled: false
                        }
                    }
                }]
            }
        })
    }).fail(function (r) {
        showFailed()
    })
}
function getPieData() {
    for (data = [],
        rcounter = 0,
        i = 0; i < txnStatuses.length; i++)
        data[i] = {
            name: txnStatuses[i].desc,
            y: parseFloat(txnStatuses[i].rate.toString().replace("%", ""))
        },
            rcounter += parseFloat(txnStatuses[i].rate);
    return data;
}
function resetPie() {
    $("#container").highcharts().destroy()
}
function drawPieChart() {
    data = getPieData(),
        data.length > 1 ? (Highcharts.chart("status-chart", {
            chart: {
                plotBackgroundColor: null,
                plotBorderWidth: null,
                plotShadow: !1,
                type: "pie"
            },
            title: {
                text: "Percentage Transaction Status",
                margin: 60,
                style: {
                    "font-family": "Sansation Bold V3",
                    "font-weight": "bold",
                    color: "#9d7c13",
                    "font-size": "18pt"
                }
            },
            noData: {
                style: {
                    fontWeight: "bold",
                    fontSize: "15px",
                    color: "#303030"
                }
            },
            credits: {
                enabled: !1
            },
            tooltip: {
                pointFormat: "{series.name}: <b>{point.percentage:.1f}%</b>"
            },
            accessibility: {
                point: {
                    valueSuffix: "%"
                }
            },
            plotOptions: {
                pie: {
                    allowPointSelect: !0,
                    cursor: "pointer",
                    dataLabels: {
                        enabled: !0,
                        format: "<b>{point.name}</b>: {point.percentage:.1f} %",
                        connectorColor: "silver"
                    }
                }
            },
            series: [{
                name: "subtitle",
                data: data
            }],
            responsive: {
                rules: [{
                    condition: {
                        maxWidth: 500
                    },
                    chartOptions: {
                        legend: {
                            align: 'center',
                            verticalAlign: 'bottom',
                            layout: 'horizontal'
                        },
                        yAxis: {
                            labels: {
                                align: 'left',
                                x: 0,
                                y: -5
                            },
                            title: {
                                text: null
                            }
                        },
                        subtitle: {
                            text: null
                        },
                        credits: {
                            enabled: false
                        }
                    }
                }]
            }
        }),
            $("#no-pie-data").hide()) : $("#no-pie-data").show()
}
function showGraphView() {
    $("#loader-div").hide(),
        $("#graph-content").show()
}
function showNipView() {
    $("#loader-div").hide(),
        $("#cards-extended").show()
}
function doGeneralView() {
    $("#txn-type-header").text(type),
        $(".date-header").text(_time),
        $("#txn-vol").text(txnVol),
        $("#processing-time").text(processingTime + " secs"),
        $("#failed-volume").text(txnVolFailed),
        $("#failed-rate").text(failureRate),
        $("#min-vol").text(minVol),
        $("#max-acc-fail-rate").text(maxAccFailureRate)
}
function setPageTitles(r, t) {
    $("#page-title").text(r),
        $("#page-sub-title").text(t)
}
function processtransactionType(r, t) {
    isToday = 0 == $("#txn-type").prop("checked"),
        t ? isToday ? nipIsTodayAndInward(r) : nipIsRangeAndInward(r) : isToday ? nipIsTodayAndOutward(r) : nipIsRangeAndOutward(r)
}
function initStatusTable() {
    data = getStatusTableData(),
        $("#status-datatable").DataTable({
            data: data
        })
}
function getStatusTableData() {
    for (data = [],
        i = 0; i < txnStatuses.length; i++)
        d = [],
            d[0] = txnStatuses[i].status,
            d[1] = txnStatuses[i].desc,
            d[2] = txnStatuses[i].vol,
            d[3] = txnStatuses[i].rate,
            data[i] = d;
    return data
}
function conPosDataToTransactionStatus() {
    o1 = {
        status: "NA",
        rate: successCountRate,
        vol: successCount,
        desc: "Success"
    },
        o2 = {
            status: "NA",
            rate: customerErrorRate,
            vol: customerError,
            desc: "Customer Error"
        },
        o3 = {
            status: "NA",
            rate: bankErrorRate,
            vol: bankError,
            desc: "Bank Error"
        },
        o4 = {
            status: "NA",
            rate: nibssErrorRate,
            vol: nibssError,
            desc: "NIBSS Error"
        },
        o5 = {
            status: "NA",
            rate: processorsErrorRate,
            vol: processorsError,
            desc: "Processors Error"
        },
        o6 = {
            status: "NA",
            rate: issuerSwitchErrorRate,
            vol: issuerSwitchError,
            desc: "Issuer Switch Error"
        },
        o7 = {
            status: "NA",
            rate: securityErrorRate,
            vol: securityError,
            desc: "Security Error"
        },
        o8 = {
            status: "NA",
            rate: otherErrorsRate,
            vol: otherErrors,
            desc: "Other Errors"
        },
        (txnStatuses = [])[0] = o1,
        txnStatuses[1] = o2,
        txnStatuses[2] = o3,
        txnStatuses[3] = o4,
        txnStatuses[4] = o5,
        txnStatuses[5] = o6,
        txnStatuses[6] = o7,
        txnStatuses[7] = o8
}
function posIsTodayAndInward(r) {
    type = "(INWARD)",
        txnVol = r.todayTxnVolInward,
        txnVolFailed = r.todayTxnVolFailedInward,
        failureRate = r.todayFailureRateInward,
        processingTime = r.todayProcessingTimeInward,
        minVol = "N/A",
        maxAccFailureRate = "N/A",
        successCount = r.todaySucccessVolInward,
        successCountRate = r.todaySucccessInward,
        customerError = r.todayErrorVolCustomerInward,
        customerErrorRate = r.todayErrorCustomerInward,
        bankError = r.todayErrorVolBankInward,
        bankErrorRate = r.todayErrorBankInward,
        nibssError = r.todayErrorVolNibssInward,
        nibssErrorRate = r.todayErrorNibssInward,
        processorsError = r.todayErrorVolProcessorInward,
        processorsErrorRate = r.todayErrorProcessorInward,
        issuerSwitchError = r.todayErrorVolIssuerSwitchInward,
        issuerSwitchErrorRate = r.todayErrorIssuerSwitchInward,
        securityError = r.todayErrorVolSecurityInward,
        securityErrorRate = r.todayErrorSecurityInward,
        otherErrors = r.todayErrorVolOthersInward,
        otherErrorsRate = r.todayErrorOthersInward
}
function posIsTodayAndOutward(r) {
    type = "(OUTWARD)",
        txnVol = r.todayTxnVolOutward,
        txnVolFailed = r.todayTxnVolFailedOutward,
        failureRate = r.todayFailureRateOutward,
        processingTime = r.todayProcessingTimeOutward,
        minVol = "N/A",
        maxAccFailureRate = "N/A",
        successCount = r.todaySucccessVolOutward,
        successCountRate = r.todaySucccessOutward,
        customerError = r.todayErrorVolCustomerOutward,
        customerErrorRate = r.todayErrorCustomerOutward,
        bankError = r.todayErrorVolBankOutward,
        bankErrorRate = r.todayErrorBankOutward,
        nibssError = r.todayErrorVolNibssOutward,
        nibssErrorRate = r.todayErrorNibssOutward,
        processorsError = r.todayErrorVolProcessorOutward,
        processorsErrorRate = r.todayErrorProcessorOutward,
        issuerSwitchError = r.todayErrorVolIssuerSwitchOutward,
        issuerSwitchErrorRate = r.todayErrorIssuerSwitchOutward,
        securityError = r.todayErrorVolSecurityOutward,
        securityErrorRate = r.todayErrorSecurityOutward,
        otherErrors = r.todayErrorVolOthersOutward,
        otherErrorsRate = r.todayErrorOthersOutward
}
function posIsRangeAndInward(r) {
    type = "(INWARD)",
        txnVol = r.rangeTxnVolInward,
        txnVolFailed = r.rangeFailedTxnVolInward,
        failureRate = r.rangeFailureRateInward,
        minVol = r.rangeMinVolInward,
        maxAccFailureRate = r.rangeMaxAccFailureRateInward,
        processingTime = r.rangeProcessingTimeInward,
        successCount = r.rangeSucccessVolInward,
        successCountRate = r.rangeSucccessInward,
        customerError = r.rangeErrorVolCustomerInward,
        customerErrorRate = r.rangeErrorCustomerInward,
        bankError = r.rangeErrorVolBankInward,
        bankErrorRate = r.rangeErrorBankInward,
        nibssError = r.rangeErrorVolNibssInward,
        nibssErrorRate = r.rangeErrorNibssInward,
        processorsError = r.rangeErrorVolProcessorInward,
        processorsErrorRate = r.rangeErrorProcessorInward,
        issuerSwitchError = r.rangeErrorVolIssuerSwitchInward,
        issuerSwitchErrorRate = r.rangeErrorIssuerSwitchInward,
        securityError = r.rangeErrorVolSecurityInward,
        securityErrorRate = r.rangeErrorSecurityInward,
        otherErrors = r.rangeErrorVolOthersInward,
        otherErrorsRate = r.rangeErrorOthersInward
}
function posIsRangeAndOutward(r) {
    type = "(OUTWARD)",
        txnVol = r.rangeTxnVolOutward,
        txnVolFailed = r.rangeFailedTxnVolOutward,
        failureRate = r.rangeFailureRateOutward,
        minVol = r.rangeMinVolOutward,
        maxAccFailureRate = r.rangeMaxAccFailureRateOutward,
        processingTime = r.rangeProcessingTimeOutward,
        successCount = r.rangeSucccessVolOutward,
        successCountRate = r.rangeSucccessOutward,
        customerError = r.rangeErrorVolCustomerOutward,
        customerErrorRate = r.rangeErrorCustomerOutward,
        bankError = r.rangeErrorVolBankOutward,
        bankErrorRate = r.rangeErrorBankOutward,
        nibssError = r.rangeErrorVolNibssOutward,
        nibssErrorRate = r.rangeErrorNibssOutward,
        processorsError = r.rangeErrorVolProcessorOutward,
        processorsErrorRate = r.rangeErrorProcessorOutward,
        issuerSwitchError = r.rangeErrorVolIssuerSwitchOutward,
        issuerSwitchErrorRate = r.rangeErrorIssuerSwitchOutward,
        securityError = r.rangeErrorVolSecurityOutward,
        securityErrorRate = r.rangeErrorSecurityOutward,
        otherErrors = r.rangeErrorVolOthersOutward,
        otherErrorsRate = r.rangeErrorOthersOutward
}
function nipIsTodayAndInward(r) {
    type = "(INWARD)",
        txnVol = r.todayTxnVolInward,
        txnVolFailed = r.todayTxnVolFailedInward,
        failureRate = r.todayFailureRateInward,
        processingTime = r.todayProcessingTimeInward,
        txnStatuses = r.todayInwardStatus,
        minVol = "N/A",
        maxAccFailureRate = "N/A"
}
function nipIsTodayAndOutward(r) {
    type = "(OUTWARD)",
        txnVol = r.todayTxnVolOutward,
        txnVolFailed = r.todayTxnVolFailedOutward,
        failureRate = r.todayFailureRateOutward,
        processingTime = r.todayProcessingTimeOutward,
        txnStatuses = r.todayOutwardStatus,
        minVol = "N/A",
        maxAccFailureRate = "N/A"
}
function nipIsRangeAndInward(r) {
    type = "(INWARD)",
        txnVol = r.rangeTxnVolInward,
        txnVolFailed = r.rangeFailedTxnVolInward,
        failureRate = r.rangeFailureRateInward,
        minVol = r.rangeMinVolInward,
        maxAccFailureRate = r.rangeMaxAccFailureRateInward,
        processingTime = r.rangeProcessingTimeInward,
        txnStatuses = r.rangeInwardStatus
}
function nipIsRangeAndOutward(r) {
    type = "(OUTWARD)",
        txnVol = r.rangeTxnVolOutward,
        txnVolFailed = r.rangeFailedTxnVolOutward,
        failureRate = r.rangeFailureRateOutward,
        minVol = r.rangeMinVolOutward,
        maxAccFailureRate = r.rangeMaxAccFailureRateOutward,
        processingTime = r.rangeProcessingTimeOutward,
        txnStatuses = r.rangeOutwardStatus
}
function processPosTimeFrame(r, t, a) {
    isInward = t,
        isToday = a,
        isToday ? (_time = (new Date).toDateString(),
            isInward ? posIsTodayAndInward(r) : posIsTodayAndOutward(r)) : (_time = r.rangeTimeInward,
                isInward ? posIsRangeAndInward(r) : posIsRangeAndOutward(r))
}
function processNipTimeFrame(r, t, a) {
    isInward = t,
        isToday = a,
        isToday ? (_time = (new Date).toDateString(),
            isInward ? nipIsTodayAndInward(r) : nipIsTodayAndOutward(r)) : (_time = r.rangeTimeInward,
                isInward ? nipIsRangeAndInward(r) : nipIsRangeAndOutward(r))
}
function processPosData(r, t, a) {
    setPageTitles(r.txnCategory, r.txnSubCatName),
        processPosTimeFrame(r, t, a),
        doGeneralView(),
        conPosDataToTransactionStatus(),
        drawPieChart(),
        initStatusTable(),
        showNipView()
}
function processNipData(r, t, a) {
    setPageTitles(r.txnCategory, r.txnSubCatName),
        processNipTimeFrame(r, t, a),
        doGeneralView(),
        drawPieChart(),
        initStatusTable(),
        showNipView()
}
function getGraphData(r, t) {
    d = r.volumeGraphs[t].graph.points;
    var a = [];
    for (t = 0; t < d.length; t++)
        dt = [d[t].x, d[t].y],
            a[t] = dt;
    return a
}
function processNipVolGraph(r, t) {
    setPageTitles(r.txnCategory, r.txnSubCatName),
        getTransactionVolume(NIP_URL, t ? 0 : 1),
        showGraphView()
}
function processPosVolGraph(r, t) {
    setPageTitles(r.txnCategory, r.txnSubCatName),
        getTransactionVolume(POS_URL, t ? 0 : 1),
        showGraphView()
}
function getNIPData(r, t, a) {
    $.get(NIP_URL, function (e, o, s) {
        "success" == o ? (e = JSON.parse(e),
            nipData = e.msg,
            void 0 === t && "vol" == a ? processNipVolGraph(nipData, r) : processNipData(nipData, r, t)) : alert("could not load data from source.")
    }).fail(function (r) {
        showFailed()
    })
}
function getPOSData(r, t, a) {
    $.get(POS_URL, function (e, o, s) {
        "success" == o ? (e = JSON.parse(e),
            posData = e.msg,
            void 0 === t && "vol" == a ? processPosVolGraph(posData, r) : processPosData(posData, r, t)) : alert("could not load data from source.")
    }).fail(function (r) {
        showFailed()
    })
}
function showFailed() {
    $("#loader-div").hide(),
        $(".dashboard-div").hide(),
        $("#failed-div").fadeIn()
}
function doActiveNav(r) {
    void 0 !== r && (uid = "'#" + r + "'",
        $(".collapsible-body").closest("li").removeClass("active open"),
        $("#nip-inward-today").addClass("active"),
        $("#nip-inward-today").closest("li").addClass("active open"))
}
$(document).ready(function () {
    Highcharts.setOptions({
        time: {
            timezone: "Africa/Lagos"
        },
        colors: Highcharts.map(Highcharts.getOptions().colors, function (r) {
            return {
                radialGradient: {
                    cx: .5,
                    cy: .3,
                    r: .7
                },
                stops: [[0, r], [1, Highcharts.color(r).brighten(-.3).get("rgb")]]
            }
        })
    }),
        dt = GetURLParameter("dt"),
        dty = GetURLParameter("dty"),
        dtf = GetURLParameter("dtf"),
        cat = GetURLParameter("cat"),
        id = GetURLParameter("id"),
        void 0 === dt && (dt = NIP),
        void 0 === dty ? dty = !0 : "true" != dty && "false" != dty ? dty = !0 : "true" == dty ? dty = !0 : "false" == dty && (dty = !1),
        void 0 === dtf ? void 0 === cat ? dtf = !0 : cat = "vol" : "true" != dtf && "false" != dtf ? dtf = !0 : "true" == dtf ? dtf = !0 : "false" == dtf && (dtf = !1),
        dt == NIP ? getNIPData(dty, dtf, cat) : dt == POS ? getPOSData(dty, dtf, cat) : getNIPData(!0, !0, cat),
        doActiveNav(id)
});
